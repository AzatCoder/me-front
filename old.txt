
// store/files.ts
import { writable } from 'svelte/store';
import type { TExtension, TExtensionsStorage } from '../types';
import MessageSendWindow from '$components/windows/MessageSend.svelte';
import ExeWindow from '$components/windows/Loading.svelte';
import ImageWindow from '$components/windows/Image.svelte';
import exeImg from '$images/executable.png';
import messagegImg from '$images/message.png';
import image from '$images/image.png';
import { getImages } from '$api';
import { imageSrc } from '$api/urls';
import AboutWindow from '$components/windows/About.svelte';

export const initialFiles: TExtensionsStorage = {
  'about': {
    component: AboutWindow,
    img: messagegImg,
    name: 'Whatta hell is g...',
    props: {}
  },
  'My Photos': async () => {
    const { data } = await getImages();
    return data.reduce((acc, { name, fileName, id }) => {
      const file = {
        component: ImageWindow,
        img: image,
        name,
        props: {
          img: imageSrc(fileName)
        },
      };
      add(id, file);

      return { ...acc, [id]: file };
    }, {});
  },
  'Games': async () => {
    return {};
  },
  'message_sender': {
    component: MessageSendWindow,
    img: messagegImg,
    name: 'Send me a message',
    props: {}
  },
  'screen_switcher': {
    component: ExeWindow,
    img: exeImg,
    name: 'Switch to full screen.exe',
    props: {
      onFinish: () => {
        if (document.fullscreenElement === null)
          document.documentElement
            .requestFullscreen()
            .then(() => rename('screen_switcher', 'Exit full screen.exe'));
        else document
          .exitFullscreen()
          .then(() => rename('screen_switcher', 'Switch to full screen.exe'));
      },
      duration: 1000,
    },
  }
};

export const mainDirectoryExtensinos: (keyof TExtensionsStorage)[] = Object.keys(initialFiles);

const files = writable(initialFiles);
const openExtensions = writable<string[]>([]);
const openExtensionsByVisibility = writable<string[]>([]);

const rename = (key: string, newName: string) => {
  files.update(extensions => {
    (extensions[key].name as string) = newName;
    return extensions;
  });
}

const add = (key: string, extension: TExtension) => {
  files.update(extensions => ({ ...extensions, [key]: extension }));
}

const replaceToLast = <T>(windows: T[], extension: string) => {
  const idx = windows.findIndex(ext => ext === extension);
  const window = windows.splice(idx, 1)[0];
  windows.push(window);
  return windows;
}

const open = (extension: string) => openExtensionsByVisibility.update(windows => {
  const visibleIdx = windows.findIndex(visibleIdx => visibleIdx === extension);

  if (visibleIdx !== -1) focus(extension);
  else {
    windows.push(extension);
    openExtensions.update(files => [...files, extension]);
  }

  return windows;
});

const close = (extension: string) => {
  openExtensionsByVisibility.update(filesIndexes => filesIndexes.filter(ext => ext !== extension));
  openExtensions.update(filesIndexes => filesIndexes.filter(ext => ext !== extension));
};

const focus = (extension: string) => openExtensionsByVisibility.update(windows => replaceToLast(windows, extension));

export const filesStore = {
  mainDirectoryExtensinos,
  files,
  openExtensions,
  openExtensionsByVisibility,
  open,
  close,
  focus
};






// types/index.ts

import type { ComponentProps, ComponentType, SvelteComponent } from 'svelte';
import type FolderWindow from '$components/windows/Folder.svelte';
import type MessageSendWindow from '$components/windows/MessageSend.svelte';
import type RunningCmdWindow from '$components/windows/Loading.svelte';
import type ImageWindow from '$components/windows/Image.svelte';
import type AboutWindow from '$components/windows/About.svelte';

// Files Structure

export type TFolder = () => TFilesStorage | Promise<TFilesStorage>;

interface FileProps {
  name: string;
  img: string;
}

type PropsWithoutWindow<T extends SvelteComponent> = Omit<ComponentProps<T>, 'window'>;

type FileComponent = {
  component: typeof MessageSendWindow;
  props: PropsWithoutWindow<MessageSendWindow>;
} | {
  component: typeof RunningCmdWindow;
  props: PropsWithoutWindow<RunningCmdWindow>;
} | {
  component: typeof ImageWindow;
  props: PropsWithoutWindow<ImageWindow>;
} | {
  component: typeof AboutWindow;
  props: PropsWithoutWindow<AboutWindow>;
}

export type TFolderExtension = TFolder & {
  component: typeof FolderWindow;
  props: PropsWithoutWindow<FolderWindow>
}
export type TFile = FileProps & FileComponent;
export type TExtension = TFile | TFolder;
export type TFilesStorage = Record<string, TFile>;
export type TExtensionsStorage = Record<string, TExtension>;

// API

interface IAPISuccessSkeleton <T> {
  type: 'success',
  data: T,
}

export interface IAPIMessageInput {
  by: string;
  messenger: string;
  username: string;
  text: string;
}

interface IAPIImage {
  id: string;
  name: string;
  fileName: string;
}

export type IAPIImages = IAPISuccessSkeleton<IAPIImage[]>;
